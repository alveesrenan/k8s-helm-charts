{{- $root := . -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "standard-application.fullname" . }}
  namespace: {{ include "standard-application.namespace" . }}
  labels:
    {{ include "standard-application.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "standard-application.name" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "standard-application.name" . }}
    spec:      
      imagePullSecrets:
        - name: {{ .Values.image.pullsecret }}
      {{- with .Values.deployment.nodeSelector }}
      nodeSelector:
      {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.deployment.affinity }}
      affinity:
      {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.deployment.securityContext }}
      securityContext:
      {{ toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Values.deployment.name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          {{- range $port := .Values.deployment.ports }}
            - name: {{ $port.name }}
              containerPort: {{ $port.containerPort }}
          {{ end -}}
          {{- if .Values.deployment.livenessProbe }}
          livenessProbe:
            httpGet:
              path: {{ .Values.deployment.livenessProbe.path }}
              port: {{ .Values.deployment.livenessProbe.containerPort }}
            initialDelaySeconds: {{ .Values.deployment.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.deployment.livenessProbe.failureThreshold }}
          {{ end -}}
          {{- if .Values.deployment.readinessProbe }}
          readinessProbe:
            httpGet:
              path: {{ .Values.deployment.readinessProbe.path }}
              port: {{ .Values.deployment.readinessProbe.containerPort }}
            initialDelaySeconds: {{ .Values.deployment.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.deployment.readinessProbe.failureThreshold }}
          {{ end -}}
          env:
            # range within normal environment variables
            {{- if .Values.deployment.env }}
              {{- range $secret_key, $secret_value := .Values.deployment.env }}
            - name: {{ $secret_key }}
              value: {{ $secret_value | quote }}
              {{ end -}}
            {{ end -}}
            # range within configmaps environment variables 
            {{- if .Values.deployment.envFromConfigMap }}
              {{- range $secret := .Values.deployment.envFromConfigMap }}
                {{- range $env_name, $secret_key := $secret.keys }}
            - name: {{ $env_name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $secret.name }}
                  key: {{ $secret_key | quote }}
                {{ end -}}
              {{ end -}}
            {{ end -}}
            # range within secrets environment variables 
            {{- if .Values.deployment.envFromSecret }}
              {{- range $secret := .Values.deployment.envFromSecret }}
                {{- range $env_name, $secret_key := $secret.keys }}
            - name: {{ $env_name }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret.name }}
                  key: {{ $secret_key | quote }}
                {{ end -}}
              {{ end -}}
            {{ end -}}
          {{- if .Values.deployment.resources }}
          resources:
          {{ toYaml .Values.deployment.resources | nindent 12 }}
          {{ end -}}
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            {{- range $pvc := .Values.persistence.volumes.persistentVolumeClaims }}
            - name: {{ printf "%s-%s" $root.Release.Name $pvc.name }}
              mountPath: {{ $pvc.path }}
            {{- end }}
            {{- range $configmap := .Values.persistence.volumes.configMaps }}
            - name: {{ printf "%s-%s" $root.Release.Name $configmap.name }}
              mountPath: {{ $configmap.path }}
              subPath: {{ $configmap.subpath }}
            {{- end }}
          {{ end -}}
      {{- if .Values.persistence.enabled }}
      volumes:
        {{- range $pvc := .Values.persistence.volumes.persistentVolumeClaims }}
        - name: {{ printf "%s-%s" $root.Release.Name $pvc.name  }}
          persistentVolumeClaim:
            claimName: {{ default $root.Values.persistence.existingClaim (printf "%s-%s-%s" $root.Release.Name $pvc.name "pvc") }}
        {{- end }}
        {{- range $configmap := .Values.persistence.volumes.configMaps }}
        - name: {{ printf "%s-%s" $root.Release.Name $configmap.name }}
          configMap:
            name: {{ $configmap.name }}
        {{- end }}
      {{ end -}}